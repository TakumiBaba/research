実世界指向プログラミングのための分散人力処理環境の構築
  慶應義塾大学政策・メディア研究科 1年
  馬場匠見(ばば たくみ)
概要
  人に対しプログラムから命令を送れるような一連の仕組みを提案
動機
  人とプログラムの関係性について興味があった
    プログラムを書いてて思う
      計算機の演算能力はすごい
        人ではこんなに高速に演算することは不可能
      一方で、プログラムで書くとこんなに難しいのに、人がやったらすぐできる
        例えば、ドアを開けるような実世界インタフェースのプログラム
          アクチュエータなども用意しなきゃいけない
        センサーやアクチュエータにはまだ限界がある
          既存のセンサーでは、コンテキストを読んだセンシングは難しい
          既存のアクチュエータは、汎用的は扱えない
        人を計算資源として見る
          HumanComputation
      気づいた
        計算機が得意なこともあれば、人が得意なこともある
        ならば、計算機が得意なことは計算機が、人が得意なことは人がやるモデルがより柔軟なコンピューティングの形では
          既存のモデルではできない、より複雑な処理や、柔軟な対応が可能になる
      人がやっても、コンピュータがやっても同じなのではないか
        人とコンピュータは近い存在
      [[[俺はプログラムの一部になれるのではないだろうか？]]]
        プログラムの一部として機能し、様々なことを行えるのではないか。
  そこで、プロトタイプを作ってみた。
    プログラムから馬場に依頼を送れるプロトタイプ
    一人で依頼を受けてみた
      面白い
    自分はプログラムの一部であり、実世界インタフェースであり、計算資源だ。
    人はプログラムの一部・実世界インタフェース・計算資源になり得る
  より柔軟に計測・判断・実行が可能な人間をプログラムから扱える仕組み
    人は大きな可能性を秘めている！
背景
  コンピュータの処理能力の限界
    コンピュータでは処理しにくい問題はまだまだ存在する
    そういった問題を人を計算資源とすることで解決する
      HumanComputation, クラウドソーシング
  センサー・アクチュエータの能力の限界
    性能は向上している
    しかし、まだまだな部分もある
    コンテキストを伴うセンシングは難しい
    汎用的な目的のために動かせるアクチュエータはない
  プログラムからより複雑な処理ができるようになるべき
提案
  実世界指向プログラミングのための分散人力処理環境の構築
    プログラムから、より柔軟に実世界に干渉していくために人力を利用
    計算資源としてだけでなく、実世界へのインタフェースとして人間を捉える
    プログラム上において、人間をセンサーやアクチュエータ、計算機と同じように扱えるようにする
    各要素が対等に通信しあえる環境を実現する
  メリット
    より強力な実世界インタフェース・ユビキタスコンピューティングの実現
    Webと実世界インタフェースのマッシュアップ
    プログラマが普段、プログラムを書くのと同じように人への命令を記述できる
    どんなことができるようになるのか、盛大に書きまくる
システム
  提案内容を実現するために、以下の3要素が必要となる
    プログラム内で人への命令を記述可能
    命令を適切な人へと配信
    ユーザの状況に応じて命令を受信し、人へと伝達、結果をプログラムに返す
  3要素を満たすため、以下の3点の開発を行う
    人への命令構文をプログラム言語に追加できるライブラリ
      プログラム上で、人間(群)オブジェクトを生成
      そのオブジェクトのメソッドを実行することによって人間に(群)に対し依頼を送れる
        ex
        ```ruby
          human = Human.new()
          human.tuplespace = "takumibaba"
          human.wake_up_me()
        ```
        ```ruby
          human = Human.new()
          human.tuplespace = "mitoh_pm"
          human.採択してください(:num => "UT0113100103", :titile => "実世界指向プログラミングのための分散人力処理環境の構築")
        ```
      説明
    ユーザの状況を認識し、命令を受け取り、その返り値をプログラムに返せるクライアントアプリ
      説明
    本環境を利用した応用アプリケーション
      Webサービスとの統合
      電子工作プロトタイピングツール
      説明
  また、命令の配信プラットフォームとして、Linda-Baseというオープンソース・ソフトウェアを利用
    増井俊之研究室が開発・運用しているWebを介して利用可能な分散処理プラットフォーム
    Lindaという分散処理の仕組みを、Web上で利用可能にしたWebサービス
  基本的な環境の構築に加え、この環境上で動くアプリケーションを実装する
    Webサービスとの連携の話とかを個々に書く
  現在の状況
    提案段階から進化
      作りたくて作り続けてしまいました。
    提案段階から違いがあったら、述べる
      どうしても作りたくなって、作っちゃった。
    人への命令構文追加ライブラリ
      基本機能はほぼ完成
      プログラミング言語Rubyのライブラリとして実装
      クライアントアプリケーションと応用アプリケーションの実装を進めていくうちに問題が出てくると思う
        その際、修正を行う
    クライアントアプリケーション
      androidアプリケーションとして実装
      命令を受け取り、返り値を返せるようにはなっている
      ユーザの状況を考慮するための仕組みを実装していく
    応用アプリケーション
      実装はまだしてない
      クックパッドのアプリケーションなどを考えている
        ブラウザ拡張のような形で実装
      既存Webアプリケーションへの組み込みプラグイン
  開発に関して
    基本的に、クライアントアプリケーションと応用アプリケーションの開発を中心に据える
      Linda-Baseとライブラリに関しては、ほぼ完成しているため
既存のものとの差異
  Amazon Mechanical Turk
    クラウドソーシングのためのプラットフォーム
    世界中の、知らない人へ依頼を行う仕組み
    実世界へのインタフェースとして利用するものではない
    信用できない
どんな出し方？
  オープンソースソフトウェアとして公開
    現在も、開発中のソースコードはすべてGithub上にて公開
      http://github.com/masuilab/babascript
      http://github.com/takumibaba/babascript-for-android
  Rubyライブラリは、RubyGemsにて公開中
    ```bash
    gem install babascript
    ```
  androidアプリはGooglePlayで配布予定
  まずは、家庭などの小規模での運用
    Webサービスと人のマッシュアップ
    Webサービスと家庭のマッシュアップ
  各種Webアプリケーションとの連携を申請
  社内ツールなどとしての販売も可能
    人へのタスク配信など
スケジュール
  10-11月
    クライアントアプリケーションの足りてない部分の開発
  12月-3月
    応用アプリケーションの開発
  4月-5月
    Webアプリケーションへの組み込み用
  6月1日
    全アプリケーションの公開
  6月-7月
    各種アプリケーションの完成度を高める
  [[未踏]]



クラウドソーシング系のサービスの台頭などによって、人をプログラムから扱うことが増えている。
計算機では解決が困難な問題は多くあり、そういった問題に対して人リソースを利用しようということだ。
計算機が得意なことは計算機が、人が得意なことは人がやるといったモデルが、より柔軟なコンピューティグの形ではないか。
現状では、ビジネス用途での利用にほぼ限られており、身近な人や自分の周りの実世界環境・計算機環境とのインタラクションには用いられていない。
また、計算資源としてしか見られていない


== 動機
人とプログラムの関係
  プログラムとして機能してみたい
プロトタイプを作った
  他人が書いたプログラムのなかで、自分が動く
    面白い
  プログラムの一部として、関数として、人は機能できる
実際に使ってみて気づいた
  こんな命令が来た
    写真を貼り付ける
    計算資源としてでなく、実世界へのインタフェースとしての需要
  計算資源としてだけでなく、実世界へのインタフェースとしても機能するのでは？
== 動機end
== 提案
既存の実世界へのインタフェースとして考えられるもの
  センサ
  アクチュエータ
センサーやアクチュエータにも向き不向きはある
  センサー
    短いスパンで継続的なデータの取得にはセンサーが向いている。人には難しい
    コンテキストを伴うデータの取得には向いていない。人ならば簡単
  アクチュエータ
    継続的かつ決められた動作を行うことはアクチュエータは得意。人には難しい
    できることが限定的すぎる。できないことのほうが多い。
計算機が得意なことは計算機が、人が得意なことは人がやれば良い
  計算資源としても効果的だが、実世界インタフェースの世界でこそより効果的に人を使えるのでは？
  人を用いることによって、より柔軟に計測・判断・実行が可能なプログラムを組むことができるのでは？
  計算機の限界を考慮し、人リソースを効果的に組み込む
通常のセンサーやアクチュエータを利用するのと同じように、人を動かせるプログラミング環境
  人と、計算機・センサ・アクチュエータがプログラム上で対等のモジュールとなり、プログラムに組み込める環境
    これからの実世界プログラミングの新しいモデルでは？
  今までの実世界インタフェースでは考えられなかったような事象が実現可能となるのでは？
== 提案end
    



メールとの差異
フォーマットは必ずしも統一されない
簡潔に記述できない
状況把握のための仕組みが入れられない