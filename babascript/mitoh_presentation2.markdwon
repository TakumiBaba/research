実世界指向プログラミングのための分散人力処理環境の構築
  慶應義塾大学政策・メディア研究科 1年
  馬場匠見(ばば たくみ

概要
  プログラムにおいて、「人」をセンサーやアクチュエータ、計算機と同じように扱える仕組みを実装する。

動機・背景
  [[[俺はプログラムになりたい！]]] or [[[自分をプログラムに組み込んでみたい！]]]
    プログラムのなかで、人はどう振る舞えるのか？
    どう記述すれば、プログラムのなかで動けるのか？
    興味があった
  プロトタイプを作った
    他人が書いたプログラムのなかで、自分が動く
      面白い
    [[[プログラムの一部として、関数として、人は機能できる！]]]
    [[[人は関数となり、返り値を返す存在になれる！]]]
  実際に使ってみて気づいた
    こんな命令が来た
      写真を貼り付ける
      計算資源としてでなく、実世界へのインタフェースとしての需要
    計算資源としてだけでなく、実世界へのインタフェースとしても機能するのでは？
  考えてみると、現状のプログラムから見た実世界へのインタフェースには問題が
    できないことが多い
    センサー
      コンテキストを伴うデータの取得は難しい
    アクチュエータ
      汎用的に使えない。用途が限定的すぎる
    人ならば、とても簡単！
  クラウドソーシング、HumaComputation
    人を計算資源として、コンピュータの取り込んでいく流れ
    ただコンピュータだけを頼るモデルの限界
  計算機が得意なことは計算機が、人が得意なことは人がやる
    クラウドソーシングやHumanComputationによって、人を計算資源として捉えることはできている
    計算資源としてだけでなく、実世界へのインタフェースとしても活用可能なのではないか
    この考えを実世界プログラミングにも適応させたい！
  人とセンサ・アクチュエータや計算機が対等の立場で通信しあい、より柔軟な実世界プログラミングを実現させることができる！

提案
  実世界指向プログラミングのための分散人力処理環境の構築
    プログラムから、より柔軟に実世界に干渉していくために人力を利用
      計算資源としてだけでなく、実世界へのインタフェースとして人間を捉える
    人と、計算機・センサ・アクチュエータがプログラム上で対等のモジュールとなり、プログラムに組み込める環境
      実世界プログラミングの新しいモデル
      今までの実世界プログラミングでは考えられなかったような事象も実現可能となる！
    既存のプログラミング言語上での動作
  特徴
    柔軟で強力な実世界インタフェース・ユビキタスコンピューティングの実現
      コンテキストの読めるセンシングとして
      より汎用的なアクチュエーションとして
      好意的解釈可能なインタプリタとして
    プログラマが普段書いてるようなプログラムの書き方そのままで人間への依頼を送れる
      いつもどおり、インスタンスオブジェクトにメソッドを送るのと同じように、
      Human.ご飯買ってこい()  で依頼できる
    もう少し、この仕組みによって実現する「すごいこと」を書く
  こんなことができるようになる
    Webと実世界の強力なマッシュアップ
      実世界とWebがつながりやすく
      「人」という要素を用いた、強力なマッシュアップが可能
    理想的なストーリーをいくつか
  実現手法
    プログラムからセンサ・アクチュエータを利用するのと同じようなインタフェースを人間にも用意する
    Arduinoオブジェクトに命令を送るのと同じように、Humanオブジェクトに命令を送るだけでデータが返ってくるようにする
    人を、Arduinoライブラリなど
  一連の流れ
    プログラムを書く
    実行する
    依頼がユーザに配信される
    ユーザが依頼を実行
    結果をプログラムに返す
    プログラムで結果を受け取る
    その後の処理を継続する
  提案内容を実現するために、以下の3要素が必要となる
    1.プログラム内で人への命令を記述可能
    2.命令を適切な人へと配信
    3.ユーザの状況に応じて命令を受信し、人へと伝達、結果をプログラムに返す
  1と3の要素を満たすため、以下の2点の開発を行う。また、2を満たすためにLinda-Baseというプラットフォームを利用する
    人への命令構文をプログラム言語に追加できるライブラリ
      プログラム上で、人間(群)オブジェクトを生成
      そのオブジェクトのメソッドを実行することによって人間に(群)に対し依頼を送れる
        ex
        ```ruby
          human  =  Human.new()
          human.tuplespace  =  "takumibaba"
          human.wake_up_me()
        ```
        ```ruby
          human  =  Human.new()
          human.tuplespace  =  "mitoh_pm"
          human.採択してください(:num  =>  "UT0113100103",  :titile  =>  "実世界指向プログラミングのための分散人力処理環境の構築")
        ```
      説明
    ユーザの状況を認識し、命令を受け取り、その返り値をプログラムに返せるクライアントアプリ
      プログラムと人との連絡役
      プログラムからの依頼を受け取り、ユーザに通知する
      ユーザが依頼に応じて処理した結果を入力できる。
      入力された内容をプログラム側に返す
      ユーザが普段から身に着けているデバイスを利用
        スマートフォンアプリなど
      説明
    命令の配信プラットフォームとして、Linda-Baseというオープンソース・ソフトウェアを利用
      増井俊之研究室が開発・運用しているWebを介して利用可能な分散処理プラットフォーム
      Lindaという分散処理の仕組みを、Web上で利用可能にしたWebサービス
      人力分散処理の仕組み
        TupleSpaceごとに分散する群を分ける
        TupleSpaceとは、概念上の共有メモリ
        TupleSpaceごとに区切ることで、個人orグループへのタスク分散を実現
          TupleSpaceを監視しているクライアントにタスクが分散して配信される
            TakumiBabaというタプルスペースの場合、TakumiBabaという人が受け取るべき
            MasuiLabというタプルスペースの場合、MasuiLabに所属する人が受け取るべき
      使用例
  基本的な環境の構築に加え、この環境上で動くアプリケーションを実装する
    提案書では触れていないが、現状での実装の進捗から考えて、応用アプリケーションの実装も可能と判断
    既存のWebアプリケーションと連携したアプリケーション
    電子工作プロトタイピングツール
  現在の実装状況
    人への命令構文追加ライブラリ
      基本機能はほぼ完成
      プログラミング言語Rubyのライブラリとして実装
      クライアントアプリケーションと応用アプリケーションの実装を進めていくうちに問題が出てくると思う
        その際、修正を行う
    クライアントアプリケーション
      androidアプリケーションとして実装
      命令を受け取り、返り値を返せるようにはなっている
      今後
        ユーザの状況を考慮するための仕組みを実装
          位置情報、入力情報などを元に
        返り値のフォーマットを定義、それに応じた返り値入力フォームをいくつか
          Boolean,  String,  Time,  Audio  など、様々なフォーマットが考えられる
    応用アプリケーション
      実装はまだしてない
      Webアプリケーションとの連携
        ユーザへのタスク依頼
          クックパッド拡張
            ブラウザ拡張として実装
            料理のレシピはプログラムである
              足りない食材の調達メソッド
              料理メソッド
            既存のアクチュエータではできない「購入」や「調理」といった実世界への干渉、実世界のアクチュエーションが可能になる
          クックパッドにかぎらず、多くのWebアプリケーションに導入可能と考えられる
        Webサービス提供側へのタスク依頼
          Webサービスの便利な拡張
          プログラムだけでは処理できないようなことを、人にタスク投げるようにすることで処理できるようになる
          #ここで適切な例を挙げたい
      電子工作プロトタイピングツール
        電子工作をしていく上で、実装できていない/部品が足りない部分を人力を用いて行う
          本来やりたいことを素早く実現
        Ruby上で、Arduinoライブラリなどの既存の電子工作系のライブラリと統合したものとしての実装を検討
          ユーザの電子工作プロトタイプを強力にサポートする
        電子工作してできた物を運用した時のエラー通知なども可能      
  開発に関して
    基本的に、クライアントアプリケーションと応用アプリケーションの開発を中心に据える
      Linda-Baseとライブラリに関しては、ほぼ完成しているため
    Linda-Baseは同研究室の橋本が全部を開発
    BabaScriptに関しても、橋本と共同で制作していた
    クライアントアプリケーションは、全て自分で制作
    本提案においては、私が全ての制作を行う
      Linda-Baseに関しては、実装は完了
      追加実装が必要な場合、私がコードを書き、OSSであるLinda-Baseにマージするよう、リクエストを送る
      BabaScriptも、提案段階では未完成だったが、今日までに基本的機能の実装が終わった。
        クライアントアプリケーションや応用アプリケーションの実装を見て、修正すべき点があれば修正を加えていく
    ここで、今までの分担の図を入れる

先行事例
  Amazon Mechanical Turk
    クラウドソーシングのためのプラットフォーム
    世界中の、知らない人へ依頼を行う仕組み
    実世界へのインタフェースとして利用するものではない

どんな出し方？
  オープンソースソフトウェアとして公開
    現在も、開発中のソースコードはすべてGithub上にて公開
      http://github.com/masuilab/babascript
      http://gxithub.com/takumibaba/babascript-for-android
  Rubyライブラリは、RubyGemsにて公開中
    % gem install babascript
    % baba -e プレゼンをしろ()
    % baba sample.rb
  androidアプリはGooglePlayで配布予定
  まずは、家庭などの小規模での運用
    Webサービスと人のマッシュアップ
    Webサービスと家庭のマッシュアップ
  各種Webアプリケーションとの連携を申請
  BabaScript  +  Linda-Base  を統合したアプリケーションとしての販売
    社内ツールなどとして利用
    人へのタスク配信など

スケジュール
  -1月
    クライアントアプリケーション開発
  1-5月
    応用アプリケーション開発
  6月1日
    アプリケーションの全公開
  6月-
    各種アプリケーションの完成度を高める
  通期
    各種アプリケーションの開発完了次第公開

まとめ
  実世界インタフェース・計算資源として人を捉え、プログラムに組み込むための仕組みを提案
    制作物
      分散人力処理環境の構築
        BabaScript
        BabaScriptクライアント
      上記環境を利用した応用アプリケーション
  人と計算機のプログラム上の融合は、生活を豊かにしてくれる
  今までにはないWebの利用や、コンピュータ体験につながる
  ありがとうございました。
[[未踏]]
